/* The following code was generated by JFlex 1.4.3 on 24/10/23 20:45 */

package analizadores;
import static analizadores.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/10/23 20:45 from the specification file
 * <tt>F:/COMPILADOR-master (1)/COMPILADOR-master/COMPILADOR1/src/analizadores/Lexico.flex</tt>
 */
class Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\6\1\5\2\0\1\6\22\0\1\6\1\62\1\12\2\0"+
    "\1\65\1\61\1\4\1\66\1\67\1\3\1\54\1\53\1\56\1\2"+
    "\1\11\12\7\1\57\1\74\1\64\1\47\1\63\1\60\1\0\1\41"+
    "\1\1\1\37\1\50\1\51\2\1\1\40\5\1\1\52\3\1\1\42"+
    "\1\34\7\1\1\72\1\0\1\73\1\0\1\1\1\0\1\23\1\13"+
    "\1\21\1\31\1\16\1\30\1\27\1\22\1\17\1\1\1\43\1\25"+
    "\1\35\1\20\1\26\1\45\1\1\1\24\1\33\1\15\1\32\1\55"+
    "\1\36\1\46\1\14\1\44\1\70\1\10\1\71\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\1\1\4\1\7\21\2\1\10\1\11\1\4\1\2"+
    "\1\4\1\12\1\13\1\1\1\14\2\15\1\1\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\0\1\14\1\5\7\2\1\27\17\2\1\30\15\2"+
    "\1\15\1\31\1\2\1\6\1\32\1\33\4\2\1\34"+
    "\3\2\1\35\2\2\1\36\14\2\1\37\22\2\1\40"+
    "\1\2\1\41\1\42\4\2\1\43\1\2\1\44\15\2"+
    "\1\45\1\2\1\46\5\2\1\47\1\50\5\2\1\51"+
    "\1\52\3\2\1\53\3\2\1\54\2\2\1\55\5\2"+
    "\1\56\3\2\1\57\1\2\1\60\1\61\3\2\1\62"+
    "\1\63\1\64\1\65\3\2\1\66\1\67\3\2\1\70"+
    "\1\71\1\2\1\72\10\2\1\73\1\74\2\2\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\75\0\267\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\75\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319"+
    "\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501"+
    "\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\75\0\u066f\0\u06ac"+
    "\0\u06e9\0\75\0\75\0\u0726\0\u0632\0\u0763\0\u07a0\0\267"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u07dd\0\75\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\172\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071"+
    "\0\u10ae\0\75\0\75\0\u10eb\0\u1128\0\75\0\u07dd\0\u1165"+
    "\0\u11a2\0\u11df\0\u121c\0\172\0\u1259\0\u1296\0\u12d3\0\172"+
    "\0\u1310\0\u134d\0\172\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\172"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\172\0\u1ab0\0\172\0\172\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\172\0\u1be1\0\172\0\u1c1e\0\u1c5b\0\u1c98"+
    "\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u1ebd\0\u1efa\0\172\0\u1f37\0\172\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\u202b\0\u2068\0\172\0\172\0\u20a5\0\u20e2\0\u211f\0\u215c"+
    "\0\u2199\0\172\0\172\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u2344\0\172\0\u2381\0\u23be\0\172\0\u23fb\0\u2438"+
    "\0\u2475\0\u24b2\0\u24ef\0\172\0\u252c\0\u2569\0\u25a6\0\172"+
    "\0\u25e3\0\172\0\172\0\u2620\0\u265d\0\u269a\0\172\0\172"+
    "\0\172\0\172\0\u26d7\0\u2714\0\u2751\0\172\0\172\0\u278e"+
    "\0\u27cb\0\u2808\0\172\0\172\0\u2845\0\172\0\u2882\0\u28bf"+
    "\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\172\0\172"+
    "\0\u2a6a\0\u2aa7\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\0\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\16\1\17"+
    "\1\20\1\21\1\3\1\22\1\23\1\24\2\3\1\25"+
    "\1\26\1\3\1\27\1\30\1\31\1\32\1\33\5\3"+
    "\1\34\1\3\1\35\3\3\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\76\0\1\3"+
    "\5\0\1\3\3\0\34\3\1\0\3\3\2\0\1\3"+
    "\66\0\1\60\31\0\1\61\76\0\1\7\70\0\1\62"+
    "\4\0\1\10\75\0\1\63\75\0\1\64\35\0\1\60"+
    "\26\0\1\3\5\0\1\3\3\0\1\3\1\65\7\3"+
    "\1\66\22\3\1\0\3\3\2\0\1\3\20\0\1\3"+
    "\5\0\1\3\3\0\7\3\1\67\1\3\1\70\22\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\12\3\1\71\20\3\1\72\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\5\3\1\73"+
    "\7\3\1\74\4\3\1\75\11\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\3\3\1\76"+
    "\13\3\1\77\14\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\7\3\1\100\1\101\1\3"+
    "\1\102\21\3\1\0\3\3\2\0\1\3\20\0\1\3"+
    "\5\0\1\3\3\0\1\103\17\3\1\104\13\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\3\3\1\105\30\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\13\3\1\106\20\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\4\3\1\107\3\3\1\110\1\3\1\111\1\112\20\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\3\3\1\113\7\3\1\114\20\3\1\0\3\3"+
    "\2\0\1\3\20\0\1\3\5\0\1\3\3\0\1\3"+
    "\1\115\1\116\4\3\1\117\7\3\1\120\3\3\1\121"+
    "\10\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\2\3\1\122\31\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\10\3\1\123"+
    "\23\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\7\3\1\124\24\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\25\3\1\125"+
    "\1\126\5\3\1\0\3\3\2\0\1\3\20\0\1\3"+
    "\5\0\1\3\3\0\10\3\1\127\1\130\5\3\1\131"+
    "\14\3\1\0\3\3\2\0\1\3\66\0\1\132\74\0"+
    "\1\60\4\0\1\133\21\0\1\3\5\0\1\3\3\0"+
    "\13\3\1\134\20\3\1\0\3\3\2\0\1\3\26\0"+
    "\1\135\37\0\1\60\6\0\1\136\77\0\1\63\62\0"+
    "\1\132\13\0\1\132\60\0\1\132\14\0\1\132\17\0"+
    "\2\137\64\0\5\64\1\0\67\64\1\0\1\3\5\0"+
    "\1\3\3\0\2\3\1\140\31\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\3\3\1\141"+
    "\30\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\4\3\1\142\4\3\1\143\22\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\1\3\1\144\15\3\1\145\14\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\20\3\1\146"+
    "\13\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\2\3\1\147\31\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\2\3\1\150"+
    "\15\3\1\151\13\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\32\3\1\152\1\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\23\3\1\153\10\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\12\3\1\154\21\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\10\3\1\155\23\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\2\3\1\156\15\3\1\157"+
    "\13\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\10\3\1\160\23\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\20\3\1\161"+
    "\13\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\20\3\1\162\13\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\2\3\1\163"+
    "\31\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\5\3\1\164\26\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\5\3\1\165"+
    "\26\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\12\3\1\166\21\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\13\3\1\167"+
    "\20\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\11\3\1\170\22\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\10\3\1\171"+
    "\23\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\17\3\1\172\14\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\5\3\1\173"+
    "\26\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\10\3\1\174\23\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\13\3\1\175"+
    "\20\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\32\3\1\176\1\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\4\3\1\177"+
    "\27\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\11\3\1\200\22\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\4\3\1\201"+
    "\27\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\4\3\1\202\27\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\26\3\1\203"+
    "\5\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\34\3\1\0\1\204\2\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\6\3\1\205\25\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\4\3\1\206\6\3\1\207\20\3\1\0\3\3"+
    "\2\0\1\3\20\0\1\3\5\0\1\3\3\0\1\210"+
    "\33\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\4\3\1\211\27\3\1\0\3\3\2\0"+
    "\1\3\26\0\1\135\66\0\1\3\5\0\1\3\3\0"+
    "\3\3\1\150\30\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\10\3\1\212\23\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\20\3\1\213\13\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\13\3\1\214\20\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\3\3\1\215\30\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\3\3\1\216\30\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\3\3\1\217\30\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\2\3\1\220\31\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\12\3\1\221\1\222\20\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\12\3\1\223\21\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\11\3\1\150\22\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\6\3\1\224\25\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\3\3\1\225\30\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\20\3\1\226\13\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\2\3\1\227\31\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\3\3\1\230\30\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\17\3\1\231\14\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\14\3\1\150\17\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\10\3\1\232\23\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\20\3\1\145\13\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\10\3\1\233\23\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\15\3\1\234\16\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\1\235\33\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\6\3\1\236\25\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\2\3\1\237\31\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\11\3\1\233\22\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\3\3\1\240\30\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\2\3\1\241\31\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\4\3\1\242\27\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\5\3\1\243\26\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\12\3\1\244\21\3\1\0\3\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\27\3\1\245\4\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\34\3\1\0\1\3\1\246\1\3\2\0\1\3\20\0"+
    "\1\3\5\0\1\3\3\0\30\3\1\247\3\3\1\0"+
    "\3\3\2\0\1\3\20\0\1\3\5\0\1\3\3\0"+
    "\34\3\1\0\3\3\2\0\1\250\20\0\1\3\5\0"+
    "\1\3\3\0\2\3\1\251\31\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\12\3\1\252"+
    "\21\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\16\3\1\253\15\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\30\3\1\254"+
    "\3\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\23\3\1\255\10\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\5\3\1\256"+
    "\26\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\10\3\1\257\23\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\3\3\1\260"+
    "\30\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\11\3\1\261\22\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\7\3\1\262"+
    "\24\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\20\3\1\263\13\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\11\3\1\264"+
    "\22\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\11\3\1\265\22\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\11\3\1\266"+
    "\22\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\12\3\1\267\21\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\2\3\1\150"+
    "\31\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\17\3\1\270\14\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\12\3\1\140"+
    "\21\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\7\3\1\271\24\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\4\3\1\272"+
    "\27\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\11\3\1\273\22\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\6\3\1\274"+
    "\25\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\5\3\1\275\26\3\1\0\3\3\2\0"+
    "\1\3\20\0\1\3\5\0\1\3\3\0\3\3\1\276"+
    "\30\3\1\0\3\3\2\0\1\3\20\0\1\3\5\0"+
    "\1\3\3\0\34\3\1\0\2\3\1\277\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\10\3\1\300\23\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\10\3\1\301\23\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\3\3\1\302\30\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\4\3\1\303\27\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\20\3\1\304\13\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\16\3\1\305\15\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\5\3\1\306\26\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\22\3\1\307\11\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\2\3\1\310\31\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\10\3\1\311\23\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\2\3\1\312\31\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\5\3\1\313\26\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\12\3\1\314\21\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\12\3\1\315\21\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\11\3\1\316\22\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\6\3\1\317\25\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\7\3\1\320\24\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\14\3\1\321\17\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\26\3\1\322\5\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\14\3\1\323\17\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\2\3\1\324\31\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\6\3\1\325\25\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\6\3\1\326\25\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\20\3\1\327\13\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\6\3\1\330\25\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\3\3\1\331\30\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\6\3\1\332\25\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\1\3\1\333\32\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\2\3\1\334\31\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\13\3\1\335\20\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\3\3\1\336\30\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\3\3\1\326\30\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\2\3\1\337\31\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\3\3\1\340\30\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\5\3\1\341\26\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\2\3\1\326\31\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\5\3\1\342\26\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\3\3\1\343\30\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\13\3\1\344\20\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\2\3\1\345\31\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\4\3\1\346\27\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\16\3\1\326\15\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\15\3\1\347\16\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\20\3\1\350\13\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\31\3\1\351\2\3"+
    "\1\0\3\3\2\0\1\3\20\0\1\3\5\0\1\3"+
    "\3\0\3\3\1\352\30\3\1\0\3\3\2\0\1\3"+
    "\20\0\1\3\5\0\1\3\3\0\16\3\1\353\15\3"+
    "\1\0\3\3\2\0\1\3\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\6\1\1\11\22\1\1\11"+
    "\3\1\2\11\5\1\11\11\1\0\1\11\46\1\2\11"+
    "\2\1\1\11\215\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { lexeme=yytext(); return SY;
          }
        case 62: break;
        case 49: 
          { lexeme=yytext(); return RTN;
          }
        case 63: break;
        case 51: 
          { lexeme = yytext(); return PRSW;
          }
        case 64: break;
        case 31: 
          { lexeme=yytext(); return PRF;
          }
        case 65: break;
        case 24: 
          { lexeme=yytext(); return PRDO;
          }
        case 66: break;
        case 27: 
          { return new Symbol(sym.VTD,yyline,yychar, yytext());
          }
        case 67: break;
        case 17: 
          { lexeme=yytext(); return LLC;
          }
        case 68: break;
        case 33: 
          { lexeme = yytext(); return VTB;
          }
        case 69: break;
        case 39: 
          { lexeme = yytext(); return TM;
          }
        case 70: break;
        case 36: 
          { lexeme = yytext(); return CS;
          }
        case 71: break;
        case 26: 
          { lexeme = yytext(); return DEC;
          }
        case 72: break;
        case 52: 
          { lexeme=yytext(); return STR;
          }
        case 73: break;
        case 25: 
          { lexeme = yytext(); return INC;
          }
        case 74: break;
        case 58: 
          { lexeme=yytext(); return PCK;
          }
        case 75: break;
        case 14: 
          { lexeme=yytext(); return PA;
          }
        case 76: break;
        case 38: 
          { lexeme = yytext(); return CHAR;
          }
        case 77: break;
        case 18: 
          { lexeme = yytext(); return COA;
          }
        case 78: break;
        case 10: 
          { lexeme=yytext(); return DOP;
          }
        case 79: break;
        case 30: 
          { lexeme=yytext(); return NW;
          }
        case 80: break;
        case 11: 
          { lexeme=yytext(); return OPT;
          }
        case 81: break;
        case 32: 
          { lexeme=yytext(); return RF;
          }
        case 82: break;
        case 56: 
          { lexeme=yytext(); return FIN;
          }
        case 83: break;
        case 55: 
          { lexeme=yytext(); return EXTS;
          }
        case 84: break;
        case 48: 
          { lexeme = yytext(); return ASR;
          }
        case 85: break;
        case 34: 
          { lexeme=yytext(); return PRE;
          }
        case 86: break;
        case 42: 
          { lexeme = yytext(); return CL;
          }
        case 87: break;
        case 21: 
          { lexeme = yytext(); return ODA;
          }
        case 88: break;
        case 23: 
          { lexeme=yytext(); return PRIF;
          }
        case 89: break;
        case 9: 
          { lexeme = yytext(); return CO;
          }
        case 90: break;
        case 13: 
          { lexeme = yytext(); return OPR;
          }
        case 91: break;
        case 43: 
          { lexeme = yytext(); return TDD;
          }
        case 92: break;
        case 7: 
          { lexeme=yytext(); return Comillas;
          }
        case 93: break;
        case 45: 
          { lexeme=yytext(); return PRW;
          }
        case 94: break;
        case 4: 
          { lexeme=yytext(); return OPA;
          }
        case 95: break;
        case 15: 
          { lexeme=yytext(); return PC;
          }
        case 96: break;
        case 53: 
          { lexeme = yytext(); return VTS;
          }
        case 97: break;
        case 19: 
          { lexeme = yytext(); return COC;
          }
        case 98: break;
        case 40: 
          { lexeme = yytext(); return BR;
          }
        case 99: break;
        case 44: 
          { lexeme=yytext(); return SPR;
          }
        case 100: break;
        case 50: 
          { lexeme=yytext(); return ST;
          }
        case 101: break;
        case 37: 
          { lexeme=yytext(); return MAIN;
          }
        case 102: break;
        case 41: 
          { lexeme = yytext(); return CE;
          }
        case 103: break;
        case 16: 
          { lexeme=yytext(); return LLA;
          }
        case 104: break;
        case 46: 
          { lexeme = yytext(); return TH;
          }
        case 105: break;
        case 20: 
          { lexeme=yytext(); return FI;
          }
        case 106: break;
        case 29: 
          { lexeme=yytext(); return TD;
          }
        case 107: break;
        case 22: 
          { lexeme = yytext(); return VTC;
          }
        case 108: break;
        case 60: 
          { lexeme = yytext(); return IMPL;
          }
        case 109: break;
        case 54: 
          { lexeme = yytext(); return MA;
          }
        case 110: break;
        case 1: 
          { return ERROR;
          }
        case 111: break;
        case 8: 
          { lexeme=yytext(); return ODA;
          }
        case 112: break;
        case 2: 
          { lexeme=yytext(); return IDU;
          }
        case 113: break;
        case 35: 
          { lexeme=yytext(); return NU;
          }
        case 114: break;
        case 28: 
          { lexeme = yytext(); return ISE;
          }
        case 115: break;
        case 12: 
          { lexeme=yytext(); return OPL;
          }
        case 116: break;
        case 5: 
          { /*Ignore*/
          }
        case 117: break;
        case 57: 
          { lexeme=yytext(); return DF;
          }
        case 118: break;
        case 6: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 119: break;
        case 59: 
          { lexeme=yytext(); return INOF;
          }
        case 120: break;
        case 3: 
          { lexeme = yytext(); return CA;
          }
        case 121: break;
        case 47: 
          { lexeme = yytext(); return IMP;
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
